#!/usr/bin/env node

var fs = require('fs');
var http = require('http');
var url = require('url');
var util = require('util');
var child_process = require('child_process');
var querystring = require('querystring');

var backman = (function () {

    var Backman = function () {
        //模块地址
        this._modulePath = process.argv[1].split('\\bin\\main')[0];
        //资源地址
        this._assetsPath = this._modulePath + '\\build';
        //工作目录
        this._workPath = process.cwd();
        //项目描述
        this._package = null;
        //缓存服务器实例
        this._server = null;
        //初始化
        this._init();
    };

    Backman.prototype._init = function () {
        this._package = JSON.parse(fs.readFileSync(this._modulePath + '\\package.json'));
    };

    Backman.prototype._createDir = function (inPath) {
        if (inPath.length > 0) {
            if (!fs.existsSync(this._workPath + inPath)) {
                fs.mkdirSync(this._workPath + inPath, 0777);
                console.warn('Backman: \x1b[36mCreate\x1b[0m ' + inPath);
            }
        }
    };

    Backman.prototype._createFile = function (inPath) {
        var encoding, content;
        if (/backman(\.min)?\.(css|js)(\.map)?$/.test(inPath) || /index\.html$/.test(inPath)) {
            encoding = /(\.jpg|\.png)$/.test(inPath) ? 'binary' : 'utf-8';
            content = fs.readFileSync(this._assetsPath + inPath, encoding);
            fs.writeFileSync(this._workPath + inPath, content, encoding);
            console.warn('Backman: \x1b[36mCreate\x1b[0m ' + inPath);
        } else {
            if (!fs.existsSync(this._workPath + inPath)) {
                encoding = /(\.jpg|\.png)$/.test(inPath) ? 'binary' : 'utf-8';
                content = fs.readFileSync(this._assetsPath + inPath, encoding);
                fs.writeFileSync(this._workPath + inPath, content, encoding);
                console.warn('Backman: \x1b[36mCreate\x1b[0m ' + inPath);
            }
        }
    };

    Backman.prototype._readPath = function (fromPath) {
        if (fs.statSync(fromPath).isDirectory(fromPath)) {
            this._createDir(fromPath.split(this._assetsPath)[1]);
            var list = fs.readdirSync(fromPath);
            for (var i = 0, name; name = list[i]; i++) {
                this._readPath(fromPath + '\\' + name);
            }
        } else {
            this._createFile(fromPath.split(this._assetsPath)[1]);
        }
    };

    Backman.prototype._serverConfig = {
        port: 8090,
        //文件类型
        mimeType: {
            "eot": "application/vnd.ms-fontobject",
            'txt': 'text/plain',
            'html': 'text/html',
            'css': 'text/css',
            'xml': 'application/xml',
            'json': 'application/json',
            'js': 'application/javascript',
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'gif': 'image/gif',
            "otf": "application/x-font-otf",
            'png': 'image/png',
            'svg': 'image/svg+xml',
            "swf": "application/x-shockwave-flash",
            "tiff": "image/tiff",
            "ttf": "application/x-font-ttf",
            "ttc": "application/x-font-ttf",
            "wav": "audio/x-wav",
            "wma": "audio/x-ms-wma",
            "wmv": "video/x-ms-wmv",
            "woff": "application/font-woff",
            "woff2": "application/font-woff2"
        },
        //404未找到页面
        page_404: function (req, res, path) {
            res.writeHead(404, {
                'Content-Type': 'text/html'
            });
            res.write('<!doctype html>\n');
            res.write('<title>404 Not Found</title>\n');
            res.write('<h1>Not Found</h1>');
            res.write(
                '<p>The requested URL ' +
                path +
                ' was not found on this server.</p>'
            );
            res.end();
        },
        //500错误页面
        page_500: function (req, res, error) {
            res.writeHead(500, {
                'Content-Type': 'text/html'
            });
            res.write('<!doctype html>\n');
            res.write('<title>Internal Server Error</title>\n');
            res.write('<h1>Internal Server Error</h1>');
            res.write('<pre>' + util.inspect(error) + '</pre>');
        }
    };

    //接口处理
    Backman.prototype._serverApi = function (api, req, res) {
        var that = this;
        //导航栏接口
        if (api == 'nav') {
        }
        //退出登录接口
        else if (api == 'logout') {
            setTimeout(function () {
                res.setHeader('Content-Type', that._serverConfig.mimeType.json);
                res.writeHead(200);
                res.end('{"state":{"code":20001,"msg":"已退出"}}');
            }, 300);
        }
        //上传图片接口
        else if (api == 'upload-base64-image') {
            var data = "";
            req.on('data', function (chunk) {
                data += chunk;
            });
            req.on('end', function () {
                var base64 = querystring.parse(data)['base64_file'];
                var extension = '.';
                switch (base64.match(/^data:image\/(\w+);base64,/)[1]) {
                    case 'jpeg':
                        extension += 'jpg';
                        break;
                    case 'jpg':
                        extension += 'jpg';
                        break;
                    case 'png':
                        extension += 'png';
                        break;
                }
                var bitmap = new Buffer(base64.replace(/^data:image\/\w+;base64,/, ''), 'base64');
                var imgId = Date.now() + '-' + parseInt(Math.random() * 1000);
                var path = that._workPath + '\\.temp\\img-' + imgId + extension;
                fs.writeFileSync(path, bitmap, 'binary');
                setTimeout(function () {
                    res.setHeader('Content-Type', that._serverConfig.mimeType.json);
                    res.writeHead(200);
                    res.end(JSON.stringify({
                        state: {
                            code: 10200,
                            msg: 'ok'
                        },
                        data: {
                            imgId: imgId,
                            url: '/.temp/img-' + imgId + extension
                        }
                    }));
                }, 1000);
            });
            if (!fs.existsSync(this._workPath + '\\.temp')) {
                this._createDir('\\.temp');
            }
        }
    };

    //浏览当前文档
    Backman.prototype._browser = function () {
        //解析地址
        var host = 'http://localhost:' + this._server.address().port + '/index.html';
        //呼起默认浏览器打开页面
        var cmd;
        //windows
        if (process.platform == 'win32') {
            cmd = 'start';
        }
        //linux
        else if (process.platform == 'linux') {
            cmd = 'xdg-open';
        }
        //mac
        else if (process.platform == 'darwin') {
            cmd = 'open';
        }
        child_process.exec(cmd + ' ' + host);
    };

    //初始化框架
    Backman.prototype.createFramework = function () {
        if (fs.readdirSync(this._workPath).length > 0) {
            console.warn('Backman: \x1b[41mError!\x1b[0m This folder is not empty, you can\'t create a new project here.');
        } else {
            this._readPath(this._assetsPath);
        }
    };

    //升级框架
    Backman.prototype.updateFramework = function () {
        if (fs.readdirSync(this._workPath).length == 0) {
            console.warn('Backman: \x1b[41mError!\x1b[0m This folder is empty! you may need to use \x1b[36mbackman init\x1b[0m before.');
        } else {
            this._readPath(this._assetsPath + '/backman');
            this._readPath(this._assetsPath + '/libs');
            this._readPath(this._assetsPath + '/index.html');
        }
    };

    //创建框架
    Backman.prototype.createServer = function () {
        if (this._server) {
            return;
        }
        var that = this;
        var finish = function () {
            finish = null;
            console.info('Backman: Server running at \x1b[1mhttp://localhost:' + that._serverConfig.port + '/\x1b[0m');
            that._browser();
        };
        this._server = http.createServer(function (req, res) {
            var pathname = url.parse(req.url).pathname;
            //接口请求
            if (pathname.indexOf('/api') == 0) {
                return that._serverApi(pathname.split('/api/')[1], req, res);
            }
            //真实地址
            var realPath = that._workPath + pathname;
            //解析文件
            fs.exists(realPath, function (exists) {
                if (!exists) {
                    return that._serverConfig.page_404(req, res, pathname);
                } else {
                    var file = fs.createReadStream(realPath);
                    res.writeHead(200, {
                        'Content-Type': that._serverConfig.mimeType[realPath.split('.').pop()] || 'text/plain'
                    });
                    file.on('data', res.write.bind(res));
                    file.on('close', res.end.bind(res));
                    file.on('error', function (err) {
                        return that._serverConfig.page_500(req, res, err);
                    });
                }
            });
        }).listen(that._serverConfig.port, function () {
            finish && finish();
        });
        this._server.on('error', function (e) {
            if (e.code == 'EADDRINUSE') {
                console.info('Backman: \x1b[43mWarning!\x1b[0m The port ' + that._serverConfig.port + ' is already in use.');
            }
            that._server.close();
            setTimeout(function () {
                if (that._serverConfig.port <= 8100) {
                    that._server.listen(++that._serverConfig.port, function () {
                        finish && finish();
                    });
                }
            }, 0);
        });
    };

    Backman.prototype.showVersion = function () {
        console.info('Backman: v' + this._package.version);
    };

    Backman.prototype.showHelp = function () {
        var cList = 'Backman: Use \x1b[36mbackman <command>\x1b[0m as\n';
        cList += '  \x1b[36minit\x1b[0m          Create a backman project on this folder.\n';
        cList += '  \x1b[36mupdate\x1b[0m        Upgrade the framework files at this project.\n';
        cList += '  \x1b[36mrun\x1b[0m           Create a simple server which the server root is point\n' +
            '                to this folder, and open it with browser.\n';
        cList += '  \x1b[36m-v\x1b[0m / \x1b[36mversion\x1b[0m  Show local installation version.\n';
        cList += '  \x1b[36m-h\x1b[0m / \x1b[36mhelp\x1b[0m     Show command list.\n';
        console.info(cList);
    };

    return new Backman();

})();

//执行命令
var command = process.argv[2];
if (command == 'init') {
    backman.createFramework();
} else if (command == 'update') {
    backman.updateFramework();
} else if (command == 'run') {
    backman.createServer();
} else if (command == '-v' || command == 'version') {
    backman.showVersion();
} else if (command == '-h' || command == 'help') {
    backman.showHelp();
}